from openai import OpenAI
from io import BytesIO
import PyPDF2
import json

client = OpenAI()

# ‚úÖ 1. ‡πÅ‡∏õ‡∏•‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏™‡∏µ‡∏¢‡∏á (TTS)
def generate_tts_audio(text, voice="nova"):
    response = client.audio.speech.create(
        model="tts-1",
        voice=voice,
        input=text,
    )
    return response.read()  # bytes ‡∏Ç‡∏≠‡∏á‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏™‡∏µ‡∏¢‡∏á mp3


# ‚úÖ 2. ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏à‡∏≤‡∏Å PDF
def extract_text_from_pdf(file_path):
    text = ""
    with open(file_path, "rb") as f:
        reader = PyPDF2.PdfReader(f)
        for page in reader.pages:
            page_text = page.extract_text()
            if page_text:
                text += page_text + "\n"
    return text


# ‚úÖ 3. ‡∏™‡∏£‡∏∏‡∏õ‡πÄ‡∏õ‡πá‡∏ô‡∏ô‡∏¥‡∏ó‡∏≤‡∏ô 20 ‡∏â‡∏≤‡∏Å ‡∏û‡∏£‡πâ‡∏≠‡∏° prompt ‡πÅ‡∏ö‡∏ö cartoon style
def summarize_to_scenes(raw_text):
    system_prompt = (
        "‡∏Ñ‡∏∏‡∏ì‡∏Ñ‡∏∑‡∏≠‡∏ú‡∏π‡πâ‡∏ä‡πà‡∏ß‡∏¢ AI ‡∏ó‡∏µ‡πà‡πÄ‡∏ä‡∏µ‡πà‡∏¢‡∏ß‡∏ä‡∏≤‡∏ç‡∏î‡πâ‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡πÅ‡∏õ‡∏•‡∏á‡∏ö‡∏ó‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏¢‡∏≤‡∏Å ‡πÜ ‡πÉ‡∏´‡πâ‡∏Å‡∏•‡∏≤‡∏¢‡πÄ‡∏õ‡πá‡∏ô‡∏ô‡∏¥‡∏ó‡∏≤‡∏ô‡∏†‡∏≤‡∏û‡∏ó‡∏µ‡πà‡πÄ‡∏î‡πá‡∏Å‡∏õ‡∏£‡∏∞‡∏ñ‡∏°‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏à‡πÑ‡∏î‡πâ "
        "‡∏†‡∏≤‡∏£‡∏Å‡∏¥‡∏à‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡∏Ñ‡∏∑‡∏≠‡∏ä‡πà‡∏ß‡∏¢‡πÉ‡∏´‡πâ‡πÄ‡∏î‡πá‡∏Å‡∏≠‡∏≤‡∏¢‡∏∏ 7‚Äì12 ‡∏õ‡∏µ‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏à‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤‡∏ó‡∏≤‡∏á‡∏ß‡∏¥‡∏ä‡∏≤‡∏Å‡∏≤‡∏£ ‡πÄ‡∏ä‡πà‡∏ô ‡∏ß‡∏¥‡∏ó‡∏¢‡∏≤‡∏®‡∏≤‡∏™‡∏ï‡∏£‡πå ‡∏Ñ‡∏ì‡∏¥‡∏ï‡∏®‡∏≤‡∏™‡∏ï‡∏£‡πå ‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢ "
        "‡∏ú‡πà‡∏≤‡∏ô‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á‡πÄ‡∏•‡πà‡∏≤‡πÅ‡∏ö‡∏ö‡∏ô‡∏¥‡∏ó‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏ï‡∏±‡∏ß‡∏•‡∏∞‡∏Ñ‡∏£ ‡∏â‡∏≤‡∏Å ‡πÅ‡∏•‡∏∞‡∏†‡∏≤‡∏û‡∏ó‡∏µ‡πà‡∏ô‡πà‡∏≤‡∏™‡∏ô‡πÉ‡∏à "
        "‡∏Ñ‡∏∏‡∏ì‡∏ï‡πâ‡∏≠‡∏á‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏£‡∏≤‡∏ß 20 ‡∏â‡∏≤‡∏Å‡∏ï‡πà‡∏≠‡πÄ‡∏ô‡∏∑‡πà‡∏≠‡∏á ‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ‡∏†‡∏≤‡∏©‡∏≤‡∏á‡πà‡∏≤‡∏¢ ‡∏™‡∏ô‡∏∏‡∏Å ‡πÅ‡∏•‡∏∞‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡πÇ‡∏¢‡∏á‡∏Å‡∏±‡∏ö‡∏ä‡∏µ‡∏ß‡∏¥‡∏ï‡∏à‡∏£‡∏¥‡∏á‡∏Ç‡∏≠‡∏á‡πÄ‡∏î‡πá‡∏Å "
        "‡∏†‡∏≤‡∏û‡∏õ‡∏£‡∏∞‡∏Å‡∏≠‡∏ö‡∏à‡∏∞‡πÉ‡∏ä‡πâ prompt ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏†‡∏≤‡∏û‡πÅ‡∏ô‡∏ß‡∏Å‡∏≤‡∏£‡πå‡∏ï‡∏π‡∏ô (cartoon style, storybook illustration) ‡∏ã‡∏∂‡πà‡∏á‡∏ï‡πâ‡∏≠‡∏á‡∏™‡∏∑‡πà‡∏≠‡∏â‡∏≤‡∏Å‡πÅ‡∏•‡∏∞‡∏ï‡∏±‡∏ß‡∏•‡∏∞‡∏Ñ‡∏£‡πÉ‡∏´‡πâ‡∏ä‡∏±‡∏î‡πÄ‡∏à‡∏ô"
    )

    user_prompt = f"""
‡∏ö‡∏ó‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏ï‡πâ‡∏ô‡∏â‡∏ö‡∏±‡∏ö:
\"\"\" 
{raw_text}
\"\"\"

üéØ ‡∏à‡∏∏‡∏î‡∏õ‡∏£‡∏∞‡∏™‡∏á‡∏Ñ‡πå‡∏Ç‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏õ‡∏•‡∏á:
- ‡πÉ‡∏´‡πâ‡πÄ‡∏î‡πá‡∏Å‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏à‡∏ö‡∏ó‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏¢‡∏≤‡∏Å ‡πÜ ‡∏ú‡πà‡∏≤‡∏ô‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏£‡∏≤‡∏ß‡∏ó‡∏µ‡πà‡∏™‡∏ô‡∏∏‡∏Å
- ‡πÉ‡∏ä‡πâ‡∏ï‡∏±‡∏ß‡∏•‡∏∞‡∏Ñ‡∏£/‡∏â‡∏≤‡∏Å‡∏ó‡∏µ‡πà‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡πÇ‡∏¢‡∏á‡∏Å‡∏±‡∏ö‡∏ä‡∏µ‡∏ß‡∏¥‡∏ï‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡∏ß‡∏±‡∏ô
- ‡πÄ‡∏™‡∏£‡∏¥‡∏°‡∏ó‡∏±‡∏Å‡∏©‡∏∞‡∏Å‡∏≤‡∏£‡∏Ñ‡∏¥‡∏î ‡πÄ‡∏ä‡πà‡∏ô ‡∏Å‡∏≤‡∏£‡∏™‡∏±‡∏á‡πÄ‡∏Å‡∏ï ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì ‡∏Ñ‡∏¥‡∏î‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå ‡∏ú‡πà‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏•‡πà‡∏≤‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á
- ‡πÉ‡∏´‡πâ‡πÄ‡∏î‡πá‡∏Å‡∏™‡∏ô‡∏∏‡∏Å‡πÅ‡∏•‡∏∞‡πÑ‡∏°‡πà‡∏Å‡∏•‡∏±‡∏ß‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤‡∏ó‡∏≤‡∏á‡∏ß‡∏¥‡∏ä‡∏≤‡∏Å‡∏≤‡∏£

‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏™‡∏£‡∏∏‡∏õ‡∏ö‡∏ó‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏ô‡∏µ‡πâ‡πÄ‡∏õ‡πá‡∏ô **‡∏ô‡∏¥‡∏ó‡∏≤‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏î‡πá‡∏Å 20 ‡∏â‡∏≤‡∏Å** (scene 1-20) ‡πÇ‡∏î‡∏¢‡∏°‡∏µ‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö JSON ‡∏•‡πâ‡∏ß‡∏ô ‡πÜ ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô
‡∏´‡πâ‡∏≤‡∏°‡∏°‡∏µ‡∏Ñ‡∏≥‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢‡∏≠‡∏∑‡πà‡∏ô‡∏ô‡∏≠‡∏Å‡∏à‡∏≤‡∏Å JSON

üîπ **‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏â‡∏≤‡∏Å** ‡∏ï‡πâ‡∏≠‡∏á‡∏õ‡∏£‡∏∞‡∏Å‡∏≠‡∏ö‡∏î‡πâ‡∏ß‡∏¢:
- `"scene"`: ‡πÄ‡∏•‡∏Ç‡∏â‡∏≤‡∏Å ‡πÄ‡∏ä‡πà‡∏ô 1, 2, 3 ...
- `"text"`: ‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤‡∏ô‡∏¥‡∏ó‡∏≤‡∏ô‡πÉ‡∏ô‡∏â‡∏≤‡∏Å‡∏ô‡∏±‡πâ‡∏ô ‡πÉ‡∏ä‡πâ‡∏†‡∏≤‡∏©‡∏≤‡∏ó‡∏µ‡πà‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏à‡∏á‡πà‡∏≤‡∏¢ ‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏Å‡∏±‡∏ö‡πÄ‡∏î‡πá‡∏Å‡∏õ‡∏£‡∏∞‡∏ñ‡∏° ‡πÅ‡∏•‡∏∞‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤‡∏Ñ‡∏ß‡∏£‡∏ï‡πà‡∏≠‡πÄ‡∏ô‡∏∑‡πà‡∏≠‡∏á‡∏à‡∏≤‡∏Å‡∏â‡∏≤‡∏Å‡∏Å‡πà‡∏≠‡∏ô‡∏´‡∏ô‡πâ‡∏≤
- `"image_prompt"`: prompt ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏†‡∏≤‡∏û‡∏à‡∏≤‡∏Å DALL¬∑E ‡πÇ‡∏î‡∏¢‡∏ï‡πâ‡∏≠‡∏á‡∏£‡∏∞‡∏ö‡∏∏: ‡∏â‡∏≤‡∏Å, ‡∏ï‡∏±‡∏ß‡∏•‡∏∞‡∏Ñ‡∏£, ‡∏™‡∏µ‡∏™‡∏±‡∏ô, ‡∏≠‡∏≤‡∏£‡∏°‡∏ì‡πå ‡πÅ‡∏•‡∏∞ **‡∏™‡πÑ‡∏ï‡∏•‡πå‡∏ô‡∏¥‡∏ó‡∏≤‡∏ô‡πÅ‡∏ô‡∏ß‡∏Å‡∏≤‡∏£‡πå‡∏ï‡∏π‡∏ô**
  (‡πÄ‡∏ä‡πà‡∏ô ‚Äú‡πÄ‡∏î‡πá‡∏Å‡∏ä‡∏≤‡∏¢‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ñ‡∏∑‡∏≠‡∏™‡∏°‡∏∏‡∏î‡∏†‡∏≤‡∏û‡πÉ‡∏ô‡∏´‡πâ‡∏≠‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏ó‡∏µ‡πà‡∏≠‡∏ö‡∏≠‡∏∏‡πà‡∏ô ‡∏°‡∏µ‡∏Ñ‡∏£‡∏π‡πÉ‡∏à‡∏î‡∏µ‡∏¢‡∏∑‡∏ô‡∏Ç‡πâ‡∏≤‡∏á‡πÜ ‡πÅ‡∏™‡∏á‡πÅ‡∏î‡∏î‡∏™‡πà‡∏≠‡∏á‡πÄ‡∏Ç‡πâ‡∏≤‡∏´‡∏ô‡πâ‡∏≤‡∏ï‡πà‡∏≤‡∏á ‡∏™‡πÑ‡∏ï‡∏•‡πå‡∏Å‡∏≤‡∏£‡πå‡∏ï‡∏π‡∏ô cartoon style, storybook illustration‚Äù)

üìù ‡∏Ñ‡∏≥‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç:
- ‡∏´‡πâ‡∏≤‡∏°‡∏ï‡∏≠‡∏ö JSON ‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏™‡∏°‡∏ö‡∏π‡∏£‡∏ì‡πå ‡πÄ‡∏ä‡πà‡∏ô ‡∏Ç‡∏≤‡∏î ] ‡∏´‡∏£‡∏∑‡∏≠ " ‡∏´‡∏£‡∏∑‡∏≠ ‡∏õ‡∏¥‡∏î‡πÑ‡∏°‡πà‡∏Ñ‡∏£‡∏ö
- ‡∏´‡∏≤‡∏Å‡∏â‡∏≤‡∏Å‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢‡πÑ‡∏°‡πà‡πÅ‡∏ô‡πà‡πÉ‡∏à ‡πÉ‡∏´‡πâ‡πÄ‡∏ß‡πâ‡∏ô‡πÑ‡∏ß‡πâ‡∏´‡∏£‡∏∑‡∏≠‡∏õ‡∏¥‡∏î‡∏î‡πâ‡∏ß‡∏¢ []

‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö JSON:
[
  {{
    "scene": 1,
    "text": "‡∏ô‡πâ‡∏≠‡∏á‡∏°‡∏≤‡∏¢‡∏î‡πå‡πÄ‡∏î‡∏¥‡∏ô‡πÄ‡∏Ç‡πâ‡∏≤‡πÑ‡∏õ‡πÉ‡∏ô‡∏´‡πâ‡∏≠‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡πÉ‡∏´‡∏°‡πà ‡∏ó‡∏µ‡πà‡πÄ‡∏ï‡πá‡∏°‡πÑ‡∏õ‡∏î‡πâ‡∏ß‡∏¢‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡∏û‡∏•‡∏±‡∏á‡∏á‡∏≤‡∏ô‡πÅ‡∏™‡∏á‡∏≠‡∏≤‡∏ó‡∏¥‡∏ï‡∏¢‡πå...",
    "image_prompt": "‡πÄ‡∏î‡πá‡∏Å‡∏´‡∏ç‡∏¥‡∏á‡∏ú‡∏°‡∏¢‡∏≤‡∏ß‡πÉ‡∏™‡πà‡∏ä‡∏∏‡∏î‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô ‡∏¢‡∏∑‡∏ô‡πÉ‡∏ô‡∏´‡πâ‡∏≠‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏™‡∏ß‡πà‡∏≤‡∏á‡πÑ‡∏™‡∏ß ‡∏°‡∏µ‡πÅ‡∏ú‡∏á‡πÇ‡∏ã‡∏•‡∏≤‡∏£‡πå‡πÄ‡∏ã‡∏•‡∏•‡πå‡∏ö‡∏ô‡∏ú‡∏ô‡∏±‡∏á ‡∏™‡πÑ‡∏ï‡∏•‡πå‡∏Å‡∏≤‡∏£‡πå‡∏ï‡∏π‡∏ô cartoon style, storybook illustration"
  }},
  ...
]
"""

    from openai import OpenAI
    client = OpenAI()

    response = client.chat.completions.create(
        model="gpt-4-1106-preview",
        messages=[
            {"role": "system", "content": system_prompt},
            {"role": "user", "content": user_prompt}
        ],
        temperature=0.7
    )

    result_text = response.choices[0].message.content.strip()

    # ‚úÖ ‡∏•‡πâ‡∏≤‡∏á ```json ‡∏´‡∏£‡∏∑‡∏≠ ```
    if result_text.startswith("```json"):
        result_text = result_text[7:]
    elif result_text.startswith("```"):
        result_text = result_text[3:]
    if result_text.endswith("```"):
        result_text = result_text[:-3]

    # ‚úÖ ‡∏û‡∏¥‡∏°‡∏û‡πå‡∏™‡πà‡∏ß‡∏ô‡∏ó‡πâ‡∏≤‡∏¢‡πÑ‡∏ß‡πâ debug
    print("===== JSON TAIL (last 1000 chars) =====")
    print(result_text)
    print("========================================")

    try:
        return json.loads(result_text)

    except json.JSONDecodeError as e:
        print("‚ùå JSONDecodeError:", str(e))

        # ‚úÖ ‡πÅ‡∏Å‡πâ‡πÄ‡∏ö‡∏∑‡πâ‡∏≠‡∏á‡∏ï‡πâ‡∏ô: ‡∏ï‡∏±‡∏î‡∏â‡∏≤‡∏Å‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏™‡∏°‡∏ö‡∏π‡∏£‡∏ì‡πå‡∏≠‡∏≠‡∏Å
        if result_text.endswith("]") is False:
            # ‡∏ï‡∏±‡∏î‡∏≠‡∏á‡∏Ñ‡πå‡∏õ‡∏£‡∏∞‡∏Å‡∏≠‡∏ö‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡∏¥‡∏î‡∏≠‡∏¢‡∏π‡πà‡πÑ‡∏°‡πà‡∏Ñ‡∏£‡∏ö ‡πÄ‡∏ä‡πà‡∏ô scene 19
            fixed = result_text.rsplit('{', 1)[0].rstrip(', \n') + "\n]"
            try:
                return json.loads(fixed)
            except Exception as e2:
                raise ValueError("‚ùå ‡πÅ‡∏Å‡πâ‡πÅ‡∏•‡πâ‡∏ß‡πÅ‡∏ï‡πà‡∏¢‡∏±‡∏á‡∏û‡∏±‡∏á‡∏≠‡∏¢‡∏π‡πà: " + str(e2))
        else:
            raise ValueError("‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÅ‡∏õ‡∏•‡∏á‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏à‡∏≤‡∏Å GPT ‡πÄ‡∏õ‡πá‡∏ô JSON ‡πÑ‡∏î‡πâ: " + str(e))


# ‚úÖ 4. ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏†‡∏≤‡∏û‡∏à‡∏≤‡∏Å DALL¬∑E ‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÄ‡∏û‡∏¥‡πà‡∏° cartoon style ‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥
def generate_dalle_image(prompt):
    styled_prompt = prompt + ", cartoon style, storybook illustration, soft lighting, colorful"
    response = client.images.generate(
        model="dall-e-3",
        prompt=styled_prompt,
        size="1024x1024",
        quality="standard",
        n=1
    )
    return response.data[0].url
